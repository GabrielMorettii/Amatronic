{
  "openapi": "3.0.0",
  "info": {
      "title": "Amatronic Documentation",
      "description": "This is an E-commerce's API Rest",
      "version": "1.0.0",
      "contact": {
          "email": "gabrielmorettisilva@gmail.com"
      }
  },
  "paths": {
    "/sessions": {
      "post": {
          "tags": ["Session"],
          "summary": "Authenticate Customer",
          "description": "The customer can authenticate itself",
          "requestBody": {
              "content": {
                  "application/json": {
                      "schema": {
                          "type": "object",
                          "properties": {
                              "email": {
                                "type": "string",
                                "example": "gabrieldevsen@gmail.com"
                              },
                              "password": {
                                  "type": "string",
                                  "example": "12345"
                              }
                          }
                      }
                  }
              }
          },
          "responses": {
              "200": {
                  "description": "Ok",
                  "content": {
                    "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "customer": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "email": {
                                  "type": "string"
                                }
                              }
                            },
                            "token": {
                              "type": "string"
                            }
                        }
                    }
                  }
                }
              },
              "400": {
                  "description": "Invalid credentials!"
              }
          }
      }
    },
    "/customers": {
        "post": {
            "tags": ["Customers"],
            "summary": "Create a customer",
            "description": "The customer can create an account",
            "requestBody": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "password": {
                                  "type": "string"
                                }
                            },
                            "example": {
                                "email": "emailsample@gmail.com",
                                "name": "sample name",
                                "password": "sample password"
                            }
                        }
                    }
                }
            },
            "responses": {
                "201": {
                    "description": "Created",
                    "content":{
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/customerScheme"
                        }
                      }
                    }
                },
                "400": {
                    "description": "The email already exists"
                }
            }
        },
        "get": {
            "tags": ["Customers"],
            "summary": "List all customers",
            "description": "Only the admin can list all customers",
            "security": [
              {
                  "bearerAuth": []
              }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/customerScheme"
                              }
                            }
                        }
                    }
                },
                "401":{
                    "description": "Something is wrong with the token",
                    "content": {
                      "application/json": {
                          "schema": {
                            "$ref": "#/components/schemas/authScheme"
                          }
                      }
                  }
                }
            }
        }
    },
    "/customers/:id": {
      "put": {
        "tags": ["Customers"],
        "summary": "Update a customer",
        "description": "The costumer can update his informations",
        "security": [
          {
              "bearerAuth": []
          }
        ],
        "parameters": [
          {
              "name": "id",
              "in": "path",
              "description": "Customer id",
              "required": true,
              "schema": {
                "type": "string"
              }
          }
       ],
        "requestBody": {
            "content": {
                "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "avatar": {
                          "type": "string",
                          "required": false,
                          "example": null
                        }
                      },
                      "example": {
                        "email": "emailsample@gmail.com",
                        "name": "sample name",
                        "avatar": "sample avatar"
                      }
                    }
                }
            }
        },
        "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/customerScheme"
                      }
                    }
                }
              }
            },
            "400": {
              "description": "The email is already taken!"
            },
            "401": {
              "description": "Something is wrong with the token",
                  "content": {
                    "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/authScheme"
                        }
                    }
                }
            },
            "404": {
              "description": "The user does not exists!"
            }
        }
      },
      "delete": {
        "tags": ["Customers"],
        "summary": "Delete a customer",
        "description": "The costumer can delete the his account",
        "security": [
          {
              "bearerAuth": []
          }
        ],
        "parameters": [
          {
              "name": "id",
              "in": "path",
              "description": "Customer id",
              "required": true,
              "schema": {
                "type": "string"
              }
          }
      ],
        "responses": {
            "204": {
              "description": "No Content"
            },
            "401": {
              "description": "Something is wrong with the token",
                  "content": {
                    "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/authScheme"
                        }
                    }
                }
            },
            "404": {
              "description": "Costumer does not exists!"
            }
        }
      }
    },
    "/categories": {
      "post": {
        "tags": ["Category"],
        "summary": "Create a category",
        "description": "The admin can update a add a new category",
        "security": [
            {
                "bearerAuth": []
            }
        ],
        "requestBody": {
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "name": "category name sample",
                            "description": "category description sample"
                        }
                    }
                }
            }
        },
        "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/categoryScheme"
                    }
                }
              }
            },
            "400": {
              "description": "The name is already used!"
            },
            "401": {
              "description": "Something is wrong with the token",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/authScheme"
                    }
                }
              }
            }
        }
      },
      "get": {
        "tags": ["Category"],
        "summary": "List all categories",
        "description": "The admin can list all existents categories",
        "responses": {
            "200": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/categoryScheme"
                            }
                        }
                    }
                }
            }
        }
      }
    },
    "/categories/:id": {
      "put": {
        "tags": ["Category"],
        "summary": "Update a category",
        "description": "The admin can update a category data",
        "security": [
          {
              "bearerAuth": []
          }
        ],
        "parameters": [
          {
              "name": "id",
              "in": "path",
              "description": "Category id",
              "required": true,
              "schema": {
                  "type": "string"
              }
          }
        ],
        "requestBody": {
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                              "type": "string",
                              "required": false
                            },
                            "description": {
                              "type": "string",
                              "required": false
                            }
                        },
                        "example": {
                            "name": "sample name",
                            "description": "sample description"
                        }
                    }
                }
            }
        },
        "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "The category already exists!"
            },
            "401": {
              "description": "Something is wrong with the token",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/authScheme"
                    }
                }
              }
            },
            "404": {
              "description": "The category does not exists!"
            }
        }
      },
      "delete": {
        "tags": ["Category"],
        "summary": "Delete a category",
        "description": "The admin can delete the a category",
        "security": [
          {
              "bearerAuth": []
          }
        ],
        "parameters": [
          {
              "name": "id",
              "in": "path",
              "description": "Category id",
              "required": true,
              "schema": {
                  "type": "string"
              }
          }
        ],
        "responses": {
            "204": {
              "description": "No Content"
            },
            "401": {
              "description": "Something is wrong with the token",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/authScheme"
                    }
                }
              }
            },
            "404": {
              "description": "The category was not found!"
            }
        }
      }
    },
    "/brands": {
      "post": {
        "tags": ["Brand"],
        "summary": "Create a brand",
        "description": "The admin can create a new brand",
        "security": [
            {
                "bearerAuth": []
            }
        ],
        "requestBody": {
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            }
                        },
                        "example": {
                            "name": "Apple"
                        }
                    }
                }
            }
        },
        "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/brandScheme"
                    }
                }
              }
            },
            "400": {
              "description": "The name is already used!"
            },
            "401": {
              "description": "Something is wrong with the token",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/authScheme"
                    }
                }
              }
            }
        }
      },
      "get": {
        "tags": ["Brand"],
        "summary": "List all brands",
        "description": "The admin can list all existents brands",
        "responses": {
            "200": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/brandScheme"
                            }
                        }
                    }
                }
            }
        }
      }
    },
    "/brands/:id": {
      "put": {
        "tags": ["Brand"],
        "summary": "Update a brand",
        "description": "The admin can update a brand data",
        "security": [
          {
              "bearerAuth": []
          }
        ],
        "parameters": [
          {
              "name": "id",
              "in": "path",
              "description": "Brand id",
              "required": true,
              "schema": {
                  "type": "string"
              }
          }
        ],
        "requestBody": {
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                              "type": "string",
                              "required": false
                            }
                        },
                        "example": {
                            "name": "Google"
                        }
                    }
                }
            }
        },
        "responses": {
            "200": {
              "description": "OK"
            },
            "400": {
              "description": "The brand already exists!"
            },
            "401": {
              "description": "Something is wrong with the token",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/authScheme"
                    }
                }
              }
            },
            "404": {
              "description": "The brand does not exists!"
            }
        }
      },
      "delete": {
        "tags": ["Brand"],
        "summary": "Delete a brand",
        "description": "The admin can delete the a brand",
        "security": [
          {
              "bearerAuth": []
          }
        ],
        "parameters": [
          {
              "name": "id",
              "in": "path",
              "description": "Brand id",
              "required": true,
              "schema": {
                  "type": "string"
              }
          }
        ],
        "responses": {
            "204": {
              "description": "No Content"
            },
            "401": {
              "description": "Something is wrong with the token",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/authScheme"
                    }
                }
              }
            },
            "404": {
              "description": "The brand was not found!"
            }
        }
      }
    },
    "/goods": {
      "post": {
        "tags": ["Goods"],
        "summary": "Create a good",
        "description": "The admin can create a new good",
        "security": [
            {
                "bearerAuth": []
            }
        ],
        "requestBody": {
            "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/components/schemas/goodScheme",
                        "example": {
                          "name": "Tablet Dobravél 3",
                          "description": "Tablet moderno que consegue ser dobrado 2",
                          "amount": 10,
                          "price": 2050.23,
                          "category_id": "225b712c-59bb-4058-a708-bbcfd2061ef8",
                          "brand_id": "7d40d59d-1962-4c19-a0fa-40cba654f5e6"
                        }
                    }
                }
            }
        },
        "responses": {
            "201": {
              "description": "Created"
            },
            "400": {
              "description": "The name is already used!"
            },
            "401": {
              "description": "Something is wrong with the token",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/authScheme"
                    }
                }
              }
            },
            "404": {
              "description": "The category/brand was not found"
            }
        }
      },
      "get": {
        "tags": ["Goods"],
        "summary": "List all goods",
        "description": "The customer can list all existents goods",
        "responses": {
            "200": {
                "description": "OK",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/goodScheme"
                            }
                        }
                    }
                }
            }
        }
      }
    },
    "/goods/:id": {
      "put": {
        "tags": ["Goods"],
        "summary": "Update a good",
        "description": "The admin can update a good data",
        "security": [
          {
              "bearerAuth": []
          }
        ],
        "parameters": [
          {
              "name": "id",
              "in": "path",
              "description": "Good id",
              "required": true,
              "schema": {
                  "type": "string"
              }
          }
        ],
        "requestBody": {
            "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/goodScheme",
                      "example": {
                        "name": "Tablet Dobravél 3",
                        "description": "Tablet moderno que consegue ser dobrado 2",
                        "amount": 10,
                        "price": 2050.23,
                        "category_id": "225b712c-59bb-4058-a708-bbcfd2061ef8",
                        "brand_id": "7d40d59d-1962-4c19-a0fa-40cba654f5e6"
                      }
                    }
                }
            }
        },
        "responses": {
            "200": {
              "description": "OK"
            },
            "401": {
              "description": "Something is wrong with the token",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/authScheme"
                    }
                }
              }
            },
            "404": {
              "description": "The Good/Category/Brand was not found!"
            }
        }
      },
      "delete": {
        "tags": ["Goods"],
        "summary": "Delete a Good",
        "description": "The admin can delete the a good",
        "security": [
          {
              "bearerAuth": []
          }
        ],
        "parameters": [
          {
              "name": "id",
              "in": "path",
              "description": "Good id",
              "required": true,
              "schema": {
                  "type": "string"
              }
          }
        ],
        "responses": {
            "204": {
              "description": "No Content"
            },
            "401": {
              "description": "Something is wrong with the token",
              "content": {
                "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/authScheme"
                    }
                }
              }
            },
            "404": {
              "description": "The good was not found!"
            }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
        "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
        }
    },
    "schemas": {
      "authScheme": {
        "type": "object",
        "properties": {
            "message": {
              "type": "string",
              "example": "Token is missing!"
            }
        }
      },
      "customerScheme": {
        "type": "object",
        "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "required": false
            },
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "avatar": {
              "type": "string",
              "required": false,
              "example": null
            },
            "admin": {
              "type": "boolean",
              "required": false,
              "example": false
            },
            "created_at": {
              "type": "string",
              "required": false,
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "required": false,
              "format": "date-time"
            }
        }
      },
      "categoryScheme": {
        "type": "object",
        "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            }
        }
      },
      "brandScheme": {
        "type": "object",
        "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "created_at": {
              "type": "string",
              "format": "date-time"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time"
            }
        }
      },
      "goodScheme": {
        "type": "object",
        "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "amount": {
              "type": "number"
            },
            "price": {
              "type": "number"
            },
            "category_id": {
              "type": "string",
              "format": "uuid"
            },
            "brand_id": {
              "type": "string",
              "format": "uuid"
            }
        }
      }
    }
  }

}
